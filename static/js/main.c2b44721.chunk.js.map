{"version":3,"sources":["components/UsersForm.js","components/UsersList.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["UsersForm","addUser","e","preventDefault","console","log","_this","inputValue","value","props","update","_this2","this","react_default","a","createElement","className","onSubmit","type","placeholder","ref","data","Component","UsersList","removeUser","key","delete","listItems","users","map","user","i","onClick","Users","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateUsersList","name","setState","prevState","concat","deleteUser","keyValue","state","filter","indexOf","components_UsersForm","components_UsersList","App","src_Users","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAuBeA,mNAnBXC,QAAU,SAACC,GACPA,EAAEC,iBACFC,QAAQC,IAAIC,EAAKC,WAAWC,OAC5BF,EAAKG,MAAMC,OAAOJ,EAAKC,WAAWC,gFAE/B,IAAAG,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAOE,SAAUL,KAAKX,SAClBY,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYE,KAAK,OAAOC,YAAY,yBAAqBC,IAAK,SAACC,GAAQV,EAAKJ,WAAWc,KACxGR,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAcE,KAAK,SAASV,MAAM,oCAZvCc,cCmBTC,6MAjBbC,WAAY,SAACC,GACVnB,EAAKG,MAAMiB,OAAOD,4EAEV,IAAAd,EAAAC,KACDe,EAAYf,KAAKH,MAAMmB,MAAMC,IAAI,SAACC,EAAKC,GAC3C,OAAOlB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBS,IAAKM,EAAGC,QAAS,kBAAIrB,EAAKa,WAAWO,KAAMD,KAEtF,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACbW,WAZeL,aCyCTW,cAtCX,SAAAA,IAAa,IAAA3B,EAAA,OAAA4B,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACT3B,EAAA4B,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,QAKJ2B,gBAAkB,SAACC,GACflC,EAAKmC,SAAS,SAACC,GACX,MAAO,CAAEd,MAAOc,EAAUd,MAAMe,OAAOH,OARlClC,EAYbsC,WAAW,SAACC,GAGR,IAAIN,EAAkBjC,EAAKwC,MAAMlB,MAAMmB,OAAO,SAACjB,GAC3C,OAAOxB,EAAKwC,MAAMlB,MAAMoB,QAAQlB,KAAUe,IAE9CvC,EAAKmC,SAAS,CACVb,MAAMW,KAjBVjC,EAAKwC,MAAQ,CACTlB,MAAO,CAAC,OAAQ,MAAO,UAHlBtB,wEAyBb,OADEF,QAAQC,IAAIO,KAAKkC,MAAMlB,OAEvBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,gBAGFH,EAAAC,EAAAC,cAACkC,EAAD,CAAWvC,OAAQE,KAAK2B,kBACxB1B,EAAAC,EAAAC,cAACmC,EAAD,CAAWtB,MAAOhB,KAAKkC,MAAMlB,MAAOF,OAAQd,KAAKgC,qBAhCnCtB,aCSL6B,mLARX,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACqC,EAAD,cAJW9B,aCSE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c2b44721.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nclass UsersForm extends Component {\n\n    addUser = (e) => {\n        e.preventDefault();\n        console.log(this.inputValue.value);\n        this.props.update(this.inputValue.value);\n    }\n  render() {\n    return (\n      <div className=\"users-form\">\n        <form  onSubmit={this.addUser}>   \n            <input className=\"text-form\" type=\"text\" placeholder=\"Nazwa użytkownika\"  ref={(data)=>{this.inputValue=data}}  />  \n            <input className=\"submit-form\" type=\"submit\" value=\"Dodaj użytkownika\" />\n        \n\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UsersForm;\n","import React, { Component } from 'react';\nimport '../App.css';\nclass UsersList extends Component {\n\n  removeUser= (key) =>{\n     this.props.delete(key);\n  }\n    render() {\n      const listItems = this.props.users.map((user,i)=>{\n        return <li className=\"users-list-item\" key={i} onClick={()=>this.removeUser(i)} >{user}</li>;\n      });   \n    return (\n      <div>\n        <ul className=\"users-list\">\n        {listItems}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default UsersList;","import React, { Component } from 'react';\nimport './App.css';\nimport UsersForm from './components/UsersForm';\nimport UsersList from './components/UsersList';\nclass Users extends Component {\n    constructor(){\n        super();\n        this.state = {\n            users: ['Adam', 'Ola', 'Karol']\n        }\n    }\n    updateUsersList = (name) => {\n        this.setState((prevState)=>{\n            return({ users: prevState.users.concat(name) })\n        });\n    }\n\n    deleteUser=(keyValue)=>{\n        // console.log('Usuń użytkownika z indexem '+ keyValue);\n\n        let updateUsersList = this.state.users.filter((user)=>{\n            return this.state.users.indexOf(user) !== keyValue;\n        });\n        this.setState({\n            users:updateUsersList\n        \n        });\n    }\n  render() {\n      console.log(this.state.users);\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-text\">\n        User's list.\n        </h1>\n      <UsersForm update={this.updateUsersList} />\n      <UsersList users={this.state.users} delete={this.deleteUser} />\n      \n      </div>\n       );\n  }\n}\n\nexport default Users;","import React, { Component } from 'react';\nimport './App.css';\nimport Users from './Users.js';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Users/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}